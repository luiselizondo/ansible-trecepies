#!/bin/bash

function errorTrap {
  status=$?
  echo "ERROR: Command exited with status $status."
}

function getPublicIP {
  id=$1
  ip=$(doctl compute droplet get ${id} --format PublicIPv4 | sed 's/Public IPv4//g' | sed '/^\s*$/d')
  echo $ip
}

HOSTS_FILE=`mktemp`
function addToHostsFile {
  host_ip=$1
  echo "$host_ip " >> $HOSTS_FILE
}

function createHost {
  name=$1
  region=$2
  image=$3
  size=$4
  ssh_key_id=$5

  output=`mktemp`
  doctl compute droplet create $name --region $region --image $image --size $size --ssh-keys $ssh_key_id > $output
  cat $output | awk '{print $1}' | sed 's/ID//g' | sed '/^\s*$/d'
}

if [ ! -s $HOME/.doctlcfg ] && [ -n "$TOKEN_API" ]; then
  # Prepare the .doctlcfg file with the TOKEN_API variable
  echo "access-token: $TOKEN_API" > ${HOME}/.doctlcfg
fi

set -u
set -e

TIMES_TO_RETRY=3
HOSTS_COUNTER=0
while [ $HOSTS_COUNTER -lt $HOSTS_TO_CREATE ]; do
  let HOSTS_COUNTER=$HOSTS_COUNTER+1
  echo "Creating host: $HOSTS_COUNTER of $HOSTS_TO_CREATE"
  name=${NAME}-${HOSTS_COUNTER}
  echo "Creating host with name $name"
  DROPLET_ID=$(createHost $name $REGION $IMAGE $SIZE $SSH_KEY_ID)

  if [ -n $DROPLET_ID ]; then
    DROPLET_HAS_IP="no"

    IP=$(getPublicIP $DROPLET_ID)

    if [ -n "$IP" ]; then
      DROPLET_HAS_IP="yes"
      addToHostsFile $(echo $IP | sed '/^\s*$/d')
    fi

    if [ $DROPLET_HAS_IP = "no" ]; then
      COUNTER=0
      while [ $COUNTER -le "$TIMES_TO_RETRY" ] && [ $DROPLET_HAS_IP = "no" ]; do
        sleep 30
        IP=$(getPublicIP $DROPLET_ID)
        if [ -n "$IP" ]; then
          DROPLET_HAS_IP="yes"
          COUNTER=4
          addToHostsFile $(echo $IP | sed '/^\s*$/d')
        fi

        if [ $COUNTER -eq "$TIMES_TO_RETRY" ] && [ $DROPLET_HAS_IP = "no" ]; then
          trap errorTrap EXIT
        fi
      done
    fi
  else
    trap errorTrap EXIT
  fi
done

cat $HOSTS_FILE | tr '\n' ' ' | sed '/^\s*$/d'
