#!/bin/bash

set -x
set -u
set -e


# Environment is used as the cluster name
ENVIRONMENT=${ENVIRONMENT}
HOW_MANY_INSTANCES=1
CONTAINER_INSTANCE_ID=${CONTAINER_INSTANCE_ID}
PROJECT_NAME=${PROJECT_NAME}

AWS_ROLE=${AWS_ECS_ROLE}
ECS_COMPOSE_FILENAME=ecs-compose.yml

echo "Creating a task definition"
TASK_DEFINITION_RESPONSE_FILE=/tmp/task-definition-output.txt

ORIGINAL_FILE=${ECS_COMPOSE_FILENAME}
NEW_FILE=/tmp/ecs-compose-processed.yml

echo "Deploying file ${ECS_COMPOSE_FILENAME} with content:"
cat ${ORIGINAL_FILE}

cp ${ORIGINAL_FILE} ${NEW_FILE}

envsubst < ${ORIGINAL_FILE} > ${NEW_FILE}

echo "Processed file is"
cat ${NEW_FILE}

touch $TASK_DEFINITION_RESPONSE_FILE
ecs-cli compose --file ${NEW_FILE} --project-name ${PROJECT_NAME} create

echo "Task definitions available for ecscompose-${PROJECT_NAME}:"
aws ecs list-task-definitions | grep ecscompose-${PROJECT_NAME}

# We have to do this because for some reason we can't parse the ecs-cli compose response
function getLatestTaskDefinitionRevision() {
  project_name=$1
  revision=$(aws ecs list-task-definitions | grep ecscompose-${project_name}: | sed 's|^.*/ecscompose-||' | sed 's|.*:||' | sed 's|\"||' | sed 's|,||' | sort -nr | head -n1)
  echo $revision
}

TASK_DEFINITION_NAME="ecscompose-${PROJECT_NAME}:$(getLatestTaskDefinitionRevision ${PROJECT_NAME})"

# function determineIfServiceExists() {
#   service_name=$1
# 	export AWS_DEFAULT_OUTPUT=text
#   serviceFoundInResponse=$(aws ecs list-services --cluster ${ENVIRONMENT} | grep ecscompose-service-${IMAGE_NAME} | awk '{print $2}' | sed 's|.*/||')
#
#   if [ "${serviceFoundInResponse}" = "${service_name}" ]; then
#     echo true
#   else
#     echo false
#   fi
# }
#
# serviceExists=$(determineIfServiceExists ${SERVICE_NAME})

aws ecs start-task \
  --cluster ${ENVIRONMENT} \
  --task-definition ${TASK_DEFINITION_NAME} \
  --container-instances ${CONTAINER_INSTANCE_ID}
