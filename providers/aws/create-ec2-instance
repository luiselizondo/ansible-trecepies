#!/bin/bash

# List of optimized AMI that work with ECS
# us-east-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-c17ce0d6
# us-west-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-b74b08d7
# us-west-2	amzn-ami-2016.03.f-amazon-ecs-optimized ami-f3468e93
# eu-west-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-12ea8261
# eu-central-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-3bf10754
# ap-northeast-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-ed26e78c
# ap-southeast-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-032af460
# ap-southeast-2 amzn-ami-2016.03.f-amazon-ecs-optimized ami-a1281cc2
# Source: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_AWSCLI.html#AWSCLI_launch_container_instance

set -e
set -u

COUNT=${HOW_MANY_IMAGES}
AWS_INSTANCE_TYPE=${INSTANCE_TYPE}
AWS_KEY_PAIR_NAME=${KEY_PAIR_NAME}
AWS_SECURITY_GROUP_NAME=${SECURITY_GROUP_NAME}
AWS_SUBNET_ID=${SUBNET_ID}

IMAGE_ID_OF_US_EAST_1=ami-c17ce0d6
IMAGE_ID_OF_US_WEST_1=ami-b74b08d7
IMAGE_ID_OF_US_WEST_2=ami-f3468e93
IMAGE_ID_OF_EU_WEST_1=ami-12ea8261
IMAGE_ID_OF_EU_CENTRAL_1=ami-3bf10754
IMAGE_ID_OF_AP_NORTHEAST_1=ami-ed26e78c
IMAGE_ID_OF_AP_SOUTHEAST_1=ami-032af460
IMAGE_ID_OF_AP_SOUTHEAST_2=ami-a1281cc2

IMAGE_ID=""
case $AWS_DEFAULT_REGION in
  us-east-1)
    IMAGE_ID=$IMAGE_ID_OF_US_EAST_1
  ;;
  us-west-1)
    IMAGE_ID=$IMAGE_ID_OF_US_WEST_1
  ;;
  us-west-2)
    IMAGE_ID=$IMAGE_ID_OF_US_WEST_2
  ;;
  eu-west-1)
    IMAGE_ID=$IMAGE_ID_OF_EU_WEST_1
  ;;
  eu-central-1)
    IMAGE_ID=$IMAGE_ID_OF_EU_CENTRAL_1
  ;;
  ap-northeast-1)
    IMAGE_ID=$IMAGE_ID_OF_AP_NORTHEAST_1
  ;;
  ap-southeast-1)
    IMAGE_ID=$IMAGE_ID_OF_AP_SOUTHEAST_1
  ;;
  ap-southeast-2)
    IMAGE_ID=IMAGE_ID_OF_AP_SOUTHEAST_2
  ;;
  *)
    IMAGE_ID=$IMAGE_ID_OF_US_EAST_1
  ;;
esac

function waitForInstanceStatus() {
  instanceId=$1

  status=$(./get-instance-status $instanceId)
  if [ "${status}" = "running" ]; then
    echo "Instance with id $instanceId is ${status}"
    exit 0
  else
    sleep 10
    echo "Instance with id $instanceId is ${status}"
    waitForInstanceStatus $instanceId
  fi
}

# Filter out invalid types of machines or create a list of valid machines
# Create subnet if neccesary

OUTPUT=`mktemp`

export AWS_DEFAULT_OUTPUT="json"

aws ec2 run-instances \
  --image-id $IMAGE_ID \
  --count $COUNT \
  --instance-type $AWS_INSTANCE_TYPE \
  --key-name $AWS_KEY_PAIR_NAME \
  --subnet-id $AWS_SUBNET_ID | tee $OUTPUT


instancesIds=$(parse-created-instance-result-and-get-instance-id $OUTPUT)

for instanceId in $instancesIds do
  waitForInstanceStatus $instanceId
done
