#!/bin/bash

# List of optimized AMI that work with ECS
# us-east-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-c17ce0d6
# us-west-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-b74b08d7
# us-west-2	amzn-ami-2016.03.f-amazon-ecs-optimized ami-f3468e93
# eu-west-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-12ea8261
# eu-central-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-3bf10754
# ap-northeast-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-ed26e78c
# ap-southeast-1 amzn-ami-2016.03.f-amazon-ecs-optimized ami-032af460
# ap-southeast-2 amzn-ami-2016.03.f-amazon-ecs-optimized ami-a1281cc2
# Source: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_AWSCLI.html#AWSCLI_launch_container_instance

set -e
set -u

COUNT=${HOW_MANY_IMAGES}
AWS_INSTANCE_TYPE=${INSTANCE_TYPE}
AWS_KEY_PAIR_NAME=${KEY_PAIR_NAME}
AWS_SECURITY_GROUP_ID=${SECURITY_GROUP_ID}
AWS_SUBNET_ID=${SUBNET_ID}
AWS_CLUSTER_NAME=${CLUSTER_NAME}
AWS_IAM_INSTANCE_PROFILE=${IAM_INSTANCE_PROFILE}

IMAGE_ID_OF_US_EAST_1=ami-c17ce0d6
IMAGE_ID_OF_US_WEST_1=ami-b74b08d7
IMAGE_ID_OF_US_WEST_2=ami-f3468e93
IMAGE_ID_OF_EU_WEST_1=ami-12ea8261
IMAGE_ID_OF_EU_CENTRAL_1=ami-3bf10754
IMAGE_ID_OF_AP_NORTHEAST_1=ami-ed26e78c
IMAGE_ID_OF_AP_SOUTHEAST_1=ami-032af460
IMAGE_ID_OF_AP_SOUTHEAST_2=ami-a1281cc2

IMAGE_ID=""
case $AWS_DEFAULT_REGION in
  us-east-1)
    IMAGE_ID=$IMAGE_ID_OF_US_EAST_1
  ;;
  us-west-1)
    IMAGE_ID=$IMAGE_ID_OF_US_WEST_1
  ;;
  us-west-2)
    IMAGE_ID=$IMAGE_ID_OF_US_WEST_2
  ;;
  eu-west-1)
    IMAGE_ID=$IMAGE_ID_OF_EU_WEST_1
  ;;
  eu-central-1)
    IMAGE_ID=$IMAGE_ID_OF_EU_CENTRAL_1
  ;;
  ap-northeast-1)
    IMAGE_ID=$IMAGE_ID_OF_AP_NORTHEAST_1
  ;;
  ap-southeast-1)
    IMAGE_ID=$IMAGE_ID_OF_AP_SOUTHEAST_1
  ;;
  ap-southeast-2)
    IMAGE_ID=IMAGE_ID_OF_AP_SOUTHEAST_2
  ;;
  *)
    IMAGE_ID=$IMAGE_ID_OF_US_EAST_1
  ;;
esac

UBUNTU_IMAGE_ID=ami-2d39803a
USERNAME=ubuntu

# TODO: Filter out invalid types of machines or create a list of valid machines
# TODO: Create subnet if neccesary

OUTPUT=`mktemp`
export AWS_DEFAULT_OUTPUT="json"

# Executes main command
aws ec2 run-instances \
  --image-id $UBUNTU_IMAGE_ID \
  --count $COUNT \
  --instance-type $AWS_INSTANCE_TYPE \
  --key-name $AWS_KEY_PAIR_NAME \
  --subnet-id $AWS_SUBNET_ID \
  --security-group-ids $AWS_SECURITY_GROUP_ID \
  --iam-instance-profile Name="${AWS_IAM_INSTANCE_PROFILE}" \
  --no-associate-public-ip-address \
  --user-data "#!/bin/bash\n
echo ECS_CLUSTER=${AWS_CLUSTER_NAME} >> /etc/ecs/ecs.config" | tee $OUTPUT

instancesIds=$(/opt/providers/aws/parse-created-instance-result-and-get-instance-id $OUTPUT)

function removeSpacesFromString() {
  STRING=$1
  STRING_WITH_NO_SPACE="$(echo -e "${STRING}" | xargs)"
  echo $STRING_WITH_NO_SPACE
}

function waitForInstanceStatus() {
  instanceId=$(removeSpacesFromString $1)
  status=$(/opt/providers/aws/get-instance-status ${instanceId})
  echo $status
}

for instanceId in $instancesIds
do
  echo "Checking if the instance $instanceId is running"
  imageIsReady="pending"

  until [[ "${imageIsReady}" = "passed" ]]; do
    sleep 10
    echo "Trying again in 10 seconds since the instance is ${imageIsReady}"
    imageIsReady=$(waitForInstanceStatus ${instanceId})
  done
done

echo "All images are ready"

function getPrivateIPOfInstance() {
  id=$(removeSpacesFromString $1)
  privateIP=$(/opt/providers/aws/get-private-ip-of-instance ${id})
  echo $privateIP
}

echo "Getting the private IPs of the instances"

privateIPs=""
for instanceId in $instancesIds
do
  ip=$(getPrivateIPOfInstance ${instanceId})
  privateIPs="${privateIPs} ${ip}"
done

echo "Private IPs are: ${privateIPs}"
echo "Waiting 30 seconds to avoid timeouts with Ansible"
sleep 30
/opt/providers/aws/run-ansible-on-ec2-to-join-cluster ${AWS_CLUSTER_NAME} ${PRIVATE_KEY_NAME} ${USERNAME} "${privateIPs}"
